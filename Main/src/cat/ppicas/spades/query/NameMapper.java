/**
 * Copyright (C) 2013 Pau Picas Sans <pau.picas@gmail.com>
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 */

package cat.ppicas.spades.query;

import android.database.Cursor;
import cat.ppicas.spades.Column;
import cat.ppicas.spades.Table;
import cat.ppicas.spades.Tables;

public class NameMapper {

	private static final String PREFIX = "__T";

	private Tables mTables = Tables.getInstance();

	public String alias(Table table) {
		return PREFIX + table.index;
	}

	/**
	 * Generates a column <i>Magic Alias</i> that is unique and represents this
	 * {@link Column}. This <i>Magic Alias</i> {@link String} will be unique
	 * from the rest of other {@link Column} possible alias. The format of this
	 * alias is the following: {@literal __<TABLE INDEX>_<COLUMN_INDEX>}. For
	 * example a generated alias can be __T4_1.
	 *
	 * @param col The {@link Column} to generate the alias.
	 * @return
	 */
	public String alias(Column col) {
		return PREFIX + col.table.index + "_" + col.index;
	}

	public String ref(Column col) {
		return PREFIX + col.table.index + "." + col.name;
	}

	public String[] refs(Column... cols) {
		String[] alias = new String[cols.length];
		for (int i = 0; i < cols.length; i++) {
			alias[i] = ref(cols[i]);
		}
		return alias;
	}

	/**
	 * Parse a column name proceeding from {@link Cursor} with the format
	 * generated by {@link #alias(Column)}. For example the column name __T2_3
	 * will return the 3rd registered {@link Column} object of the 2nd
	 * registered {@link OldTable}.
	 *
	 * @param name Cursor column name.
	 * @return A {@link Column}.
	 * @see #alias(Column)
	 */
	public Column parseColumnName(String name) {
		if (!name.startsWith(PREFIX)) {
			return null;
		}
		name = name.substring(PREFIX.length());
		StringBuilder builder = new StringBuilder();
		int tableIndex = -1;
		for (int i = 0; i < name.length(); i++) {
			char c = name.charAt(i);
			if (Character.isDigit(c)) {
				builder.append(c);
			} else if (c == '_') {
				tableIndex = Integer.valueOf(builder.toString());
				builder.setLength(0);
			} else {
				return null;
			}
		}
		int colIndex = Integer.valueOf(builder.toString());

		Table table = mTables.getTable(tableIndex);
		return (table != null) ? table.getColumn(colIndex) : null;
	}

}
